// TODO: Requiring a behavior here is overly restrictive - need to iron out
// how to construct async callbacks in general - likely using fat pointers.
:trait tag File.Loader.ResultActor
  :: This will be called as a callback after trying to load a file, including
  :: the path that was requested to be loaded, the result code, and content.
  ::
  :: If the attempt was successful, `result` will be `File.Result.Success`,
  :: and the entire file's data will be in the `content` buffer.
  ::
  :: On error, `result` will indicate a specific error code, and the `content`
  :: buffer will either be completely empty, or (less often) have an incomplete
  :: portion of the file's data (whatever was loaded prior to the error).
  :be result_of_load_from_file(
    path File.Path.Readable
    result File.Result
    content Bytes'iso
  )

:: Load files from disk, loading each specified file entirely into memory.
:actor File.Loader
  :be load_from_file(
    path File.Path.Readable
    callback File.Loader.ResultActor
  )
    try (
      _Unsafe.check_path!(path.string) -> (error |
        callback.result_of_load_from_file(path, error, Bytes.new_iso)
      )

      fd = _Unsafe.open_read!(path) -> (error |
        case error == (
        | File.Result.AccessDenied |
          if Platform.is_windows (
            // TODO: Check if the path refers to a directory. If it is, switch
            // the error to File.Result.PathIsDirectory, which is more helpful.
          )
        | File.Result.NeedsRetry |
          @load_from_file(path, callback) // try again
          return
        )

        callback.result_of_load_from_file(path, error, Bytes.new_iso)
      )

      try (
        buffer = Bytes.new
        _Unsafe.read_all!(path, fd, buffer) -> (error |
          callback.result_of_load_from_file(path, error, buffer.take_buffer)
        )

        // Success!
        result = File.Result.Success
        callback.result_of_load_from_file(path, result, buffer.take_buffer)
      )

      // Close the file descriptor prior to exit (on success or failure).
      _Unsafe.close!(fd) -> (error |
        // Note that we don't deal with the error here, because it seems like
        // there's not much we can do in the case of failure.
        //
        // At any rate, this is only a read operation, so it won't leave
        // the filesystem in an inconsistent state. It seems unlikely to matter.
      )
    )
