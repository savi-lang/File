:module _FFI.INotify
  :ffi init(flags I32) I32
    :foreign_name inotify_init1

  :ffi add_watch(fd I32, path CPointer(U8), mask U32) I32
    :foreign_name inotify_add_watch

  :ffi rm_watch(fd I32, wd I32) I32
    :foreign_name inotify_rm_watch

  :fun path_max USize: 255

  :fun flag_nonblock I32: 0x800

:struct val _FFI.INotify.Event
  :fun non header_byte_size USize: 16
  :fun non max_total_byte_size: @header_byte_size + _FFI.INotify.path_max + 1

  :fun non _none: @_new(0, 0, 0, 0, "")
  :fun is_none: @mask == 0

  // Header data.
  :let wd     I32 // Watch descriptor
  :let mask   U32 // Mask describing event
  :let cookie U32 // Unique cookie associating related events (for rename)
  :let len    U32 // Size of name field

  // Immediately follows the header (but needs to be chopped off as a string).
  :let name String

  // Private constructor to control creation.
  :new val _new(@wd, @mask, @cookie, @len, @name)

  :: Pull an event from the head of the buffer, chopping it off, so that
  :: the buffer is left holding only the remaining events / partial data.
  ::
  :: Raises an error (without chopping anything) if there's not enough data yet.
  :fun non chop_from_buffer!(buffer Bytes'ref)
    // Read the length first to fail fast if there's not enough buffer.
    len = buffer.read_native_u32!(12)

    // Read the rest of header data from the event buffer.
    wd = buffer.read_native_u32!(0).i32
    mask = buffer.read_native_u32!(4)
    cookie = buffer.read_native_u32!(8)

    // Grab the event buffer (or fail fast if there's not enough buffer).
    event_buffer = buffer.chop_left!(@header_byte_size + len.usize)

    // Pull the name off the right side of the event buffer,
    // leaving the event buffer holding only the header data.
    name_bytes = event_buffer.chop_right(@header_byte_size)

    // Remove any trailing null bytes from the name.
    name_bytes.truncate(try (
      name_bytes.find_index! -> (byte | byte == 0)
    |
      name_bytes.size
    ))

    // Finally, convert the name bytes to a string and store it.
    name = String.from_bytes(--name_bytes)

    @_new(wd, mask, cookie, len, name)

  :fun non flag_access        U32: 0x00000001
  :fun non flag_modify        U32: 0x00000002
  :fun non flag_attrib        U32: 0x00000004
  :fun non flag_close_write   U32: 0x00000008
  :fun non flag_close_nowrite U32: 0x00000010
  :fun non flag_open          U32: 0x00000020
  :fun non flag_moved_from    U32: 0x00000040
  :fun non flag_moved_to      U32: 0x00000080
  :fun non flag_create        U32: 0x00000100
  :fun non flag_delete        U32: 0x00000200
  :fun non flag_delete_self   U32: 0x00000400
  :fun non flag_move_self     U32: 0x00000800
  :fun non flag_unmount       U32: 0x00002000
  :fun non flag_q_overflow    U32: 0x00004000
  :fun non flag_ignored       U32: 0x00008000
  :fun non flag_is_dir        U32: 0x40000000

  :fun is_access:        @mask.bit_and(@flag_access).is_nonzero
  :fun is_modify:        @mask.bit_and(@flag_modify).is_nonzero
  :fun is_attrib:        @mask.bit_and(@flag_attrib).is_nonzero
  :fun is_close_write:   @mask.bit_and(@flag_close_write).is_nonzero
  :fun is_close_nowrite: @mask.bit_and(@flag_close_nowrite).is_nonzero
  :fun is_open:          @mask.bit_and(@flag_open).is_nonzero
  :fun is_moved_from:    @mask.bit_and(@flag_moved_from).is_nonzero
  :fun is_moved_to:      @mask.bit_and(@flag_moved_to).is_nonzero
  :fun is_create:        @mask.bit_and(@flag_create).is_nonzero
  :fun is_delete:        @mask.bit_and(@flag_delete).is_nonzero
  :fun is_delete_self:   @mask.bit_and(@flag_delete_self).is_nonzero
  :fun is_move_self:     @mask.bit_and(@flag_move_self).is_nonzero
  :fun is_unmount:       @mask.bit_and(@flag_unmount).is_nonzero
  :fun is_q_overflow:    @mask.bit_and(@flag_q_overflow).is_nonzero
  :fun is_ignored:       @mask.bit_and(@flag_ignored).is_nonzero
  :fun is_dir:           @mask.bit_and(@flag_is_dir).is_nonzero

  :fun non flag_all_relevant_events
    U32.zero
      .bit_or(@flag_modify)
      .bit_or(@flag_attrib)
      .bit_or(@flag_close_write)
      .bit_or(@flag_moved_from)
      .bit_or(@flag_moved_to)
      .bit_or(@flag_create)
      .bit_or(@flag_delete)

  :fun to_standard_flags U16
    flags U16 = 0
    if @is_create (
      flags = flags.bit_or(File.Watcher.Event._flag_added)
    )
    if @is_modify (
      flags = flags.bit_or(File.Watcher.Event._flag_updated)
    )
    if @is_close_write (
      flags = flags.bit_or(File.Watcher.Event._flag_updated)
    )
    if @is_attrib (
      flags = flags.bit_or(File.Watcher.Event._flag_attr_modified)
    )
    if @is_delete (
      flags = flags.bit_or(File.Watcher.Event._flag_removed)
    )
    if @is_moved_to (
      flags = flags.bit_or(File.Watcher.Event._flag_added)
      flags = flags.bit_or(File.Watcher.Event._flag_moved_to)
    )
    if @is_moved_from (
      flags = flags.bit_or(File.Watcher.Event._flag_removed)
      flags = flags.bit_or(File.Watcher.Event._flag_moved_from)
    )
    if @is_dir (
      flags = flags.bit_or(File.Watcher.Event._flag_is_directory)
    )
    flags

