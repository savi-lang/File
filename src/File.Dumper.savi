// TODO: Requiring a behavior here is overly restrictive - need to iron out
// how to construct async callbacks in general - likely using fat pointers.
:trait tag File.Dumper.ResultActor
  :be result_of_dump_to_file(
    path File.Path.Writable
    result File.Result
  )

:module File.Dumper.ResultActor.None
  :is File.Dumper.ResultActor
  :fun non result_of_dump_to_file(
    path File.Path.Writable
    result File.Result
  )
    None

:: Dump given files to disk, creating them if they don't exist, or replacing
:: all former contents if they did already exist.
:actor File.Dumper
  :be dump_to_file(
    path File.Path.Writable
    chunks Array(Bytes)'val
    callback File.Dumper.ResultActor = File.Dumper.ResultActor.None
  )
    try (
      _Unsafe.check_path!(path.string) -> (error |
        callback.result_of_dump_to_file(path, error)
      )

      fd = _Unsafe.open_write_create!(path) -> (error |
        case error == (
        | File.Result.PathPrefixNotFound |
          // TODO: Create the prefix directories instead of being asinine.
          None
        | File.Result.AccessDenied |
          if Platform.is_windows (
            // TODO: Check if the path refers to a directory. If it is, switch
            // the error to File.Result.PathIsDirectory, which is more helpful.
          )
        | File.Result.NeedsRetry |
          @dump_to_file(path, chunks, callback) // try again
          return
        )

        callback.result_of_dump_to_file(path, error)
      )

      try (
        _Unsafe.writev_loop!(fd, chunks) -> (error |
          callback.result_of_dump_to_file(path, error)
        )
        _Unsafe.fsync!(fd) -> (error |
          callback.result_of_dump_to_file(path, error)
        )
        _Unsafe.close!(fd) -> (error |
          callback.result_of_dump_to_file(path, error)
        )
        callback.result_of_dump_to_file(path, File.Result.Success)
      |
        // If any of the above steps failed, just close the file descriptor.
        _Unsafe.close!(fd) -> (error |
          // This is the failure path - we already called a callback with an
          // error above, so we don't want to forward an additional error here,
          // even if the close step failed with an error.
        )
      )
    )
