:module _FFI
  :ffi errno OSError
    :foreign_name pony_os_errno

  :ffi clear_errno None
    :foreign_name pony_os_clear_errno

  :fun o_rdonly I32: 0
  :fun o_wronly I32: 0x1
  :fun o_rdwr I32: 0x2
  :fun o_creat I32: if Platform.is_windows (0x100 | 0x40)
  :fun o_excl I32: if Platform.is_windows (0x400 | 0x80)
  :fun o_trunc I32: if Platform.is_windows (0x200 | 0x200)
  :fun o_append I32: if Platform.is_windows (0x8 | 0x400)
  :fun o_binary I32: if Platform.is_windows (0x8000 | 0) // windows only

  :fun open(path, flags, mode U32)
    if Platform.is_posix (
      @open_posix(path, flags, mode)
    |
      @open_windows(path, flags, mode)
    )
  :ffi variadic open_posix(path CPointer(U8), flags I32) I32
    :foreign_name open
  :ffi variadic open_windows(path CPointer(U8), flags I32) I32
    :foreign_name _open

  :fun read(fd, buf, count USize)
    if Platform.is_posix (
      @read_posix(fd, buf, count)
    |
      @read_windows(fd, buf, try (count.u32! | U32.max_value)).isize
    )
  :ffi read_posix(fd I32, buf CPointer(U8), count USize) ISize
    :foreign_name read
  :ffi read_windows(fd I32, buf CPointer(U8), count U32) I32
    :foreign_name _read

  :ffi writev_posix(
    fd I32
    iovs CPointer(_WriteChunk)
    iov_count I32
  ) ISize
    :foreign_name writev
  // No writev on Windows we - only can do an individual write.
  :ffi write_windows(
    fd I32
    buffer CPointer(U8)
    count U32
  ) I32
    :foreign_name _write

  :fun fsync(fd I32) I32
    if Platform.is_posix (
      @fsync_posix(fd)
    |
      @fsync_windows(fd)
    )
  :ffi fsync_posix(fd I32) I32
    :foreign_name fsync
  :ffi fsync_windows(fd I32) I32
    :foreign_name _commit

  // TODO: windows
  :ffi close(fd I32) I32
    :foreign_name close

  :ffi asio_event_create(
    owner AsioEvent.Actor
    fd I32, flags U32, nsec U64, noisy Bool
  ) AsioEvent.ID
    :foreign_name pony_asio_event_create
